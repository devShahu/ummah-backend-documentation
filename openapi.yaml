openapi: 3.0.0
info:
  title: Super Chat API
  description: |
    API documentation for the Super Chat backend.
    This API powers the Super Chat Android application.
  version: 1.0.0
  contact:
    name: Super Chat Support
    email: support@superchat.com

servers:
  - url: http://localhost:3000/api
    description: Local development server
  - url: https://api.superchat.com/api
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: boolean
          example: true
        message:
          type: string
          example: Error description

    Success:
      type: object
      properties:
        error:
          type: boolean
          example: false
        message:
          type: string
          example: Operation successful
        data:
          type: object

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        phone_number:
          type: string
          example: "+1234567890"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        photo:
          type: string
          format: uri
          example: "https://example.com/photos/john.jpg"
        status:
          type: string
          example: "Hey there! I'm using Super Chat"
        verified:
          type: boolean
          example: true
        disabled:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-02T00:00:00.000Z"

    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        name:
          type: string
          example: "Friends Group"
        photo:
          type: string
          format: uri
          example: "https://example.com/photos/group.jpg"
        only_admins_can_post:
          type: boolean
          example: false
        created_by:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-02T00:00:00.000Z"
        disabled:
          type: boolean
          example: false

    Admin:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174002
        username:
          type: string
          example: "admin"
        email:
          type: string
          format: email
          example: "admin@example.com"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"

    SMSLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174003
        phone_number:
          type: string
          example: "+1234567890"
        message:
          type: string
          example: "Your OTP is 123456"
        request_id:
          type: string
          example: "sms_request_id"
        status:
          type: string
          enum: [pending, delivered, failed]
          example: "delivered"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00.000Z"

    Pagination:
      type: object
      properties:
        total:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        pages:
          type: integer
          example: 5

paths:
  /auth/send-otp:
    post:
      summary: Send OTP
      description: Sends an OTP (One-Time Password) to the provided phone number for authentication.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone_number
              properties:
                phone_number:
                  type: string
                  example: "+1234567890"
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          phone_number:
                            type: string
                            example: "+1234567890"
                          expires_in:
                            type: integer
                            example: 300
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/verify-otp:
    post:
      summary: Verify OTP
      description: Verifies the OTP sent to the user's phone number and returns a JWT token upon successful verification.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone_number
                - otp_code
              properties:
                phone_number:
                  type: string
                  example: "+1234567890"
                otp_code:
                  type: string
                  example: "123456"
      responses:
        '200':
          description: OTP verified successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            example: "your_jwt_token"
                          user:
                            $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      summary: Logout
      description: Invalidates the current JWT token.
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/profile:
    get:
      summary: Get Profile
      description: Retrieves the authenticated user's profile information.
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Profile
      description: Updates the authenticated user's profile information.
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "New Name"
                email:
                  type: string
                  format: email
                  example: "new_email@example.com"
                photo:
                  type: string
                  format: uri
                  example: "new_photo_url"
                status:
                  type: string
                  example: "New status message"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/notification-token:
    post:
      summary: Register Notification Token
      description: Registers a device token for push notifications.
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - device_id
              properties:
                token:
                  type: string
                  example: "device_token"
                device_id:
                  type: string
                  example: "device_id"
      responses:
        '200':
          description: Notification token registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Unregister Notification Token
      description: Unregisters a device token for push notifications.
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: "device_token"
      responses:
        '200':
          description: Notification token unregistered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      summary: Get All Users
      description: Retrieves a list of all users with pagination. Admin only.
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          description: Search term for name or phone number
          schema:
            type: string
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              $ref: '#/components/schemas/User'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      summary: Get User by ID
      description: Retrieves a specific user by their ID.
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The UUID of the user to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups:
    post:
      summary: Create Group
      description: Creates a new group.
      tags:
        - Groups
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Group Name"
                photo:
                  type: string
                  format: uri
                  example: "group_photo_url"
                only_admins_can_post:
                  type: boolean
                  default: false
                  example: false
                members:
                  type: array
                  items:
                    type: string
                    format: uuid
                  example: ["user_uuid1", "user_uuid2"]
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/login:
    post:
      summary: Admin Login
      description: Authenticates an admin user and returns a JWT token.
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "admin_username"
                password:
                  type: string
                  example: "admin_password"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            example: "admin_jwt_token"
                          admin:
                            $ref: '#/components/schemas/Admin'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /sms/logs:
    get:
      summary: Get SMS Logs
      description: Retrieves SMS logs with pagination. Admin only.
      tags:
        - SMS
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of logs per page
          schema:
            type: integer
            default: 20
        - name: phone_number
          in: query
          description: Filter by phone number
          schema:
            type: string
      responses:
        '200':
          description: SMS logs retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          logs:
                            type: array
                            items:
                              $ref: '#/components/schemas/SMSLog'
                          pagination:
                            $ref: '#/components/schemas/Pagination'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

tags:
  - name: Authentication
    description: Endpoints for user authentication and profile management
  - name: Users
    description: Endpoints for user management
  - name: Groups
    description: Endpoints for group management
  - name: Admin
    description: Endpoints for administrative operations
  - name: SMS
    description: Endpoints for SMS-related operations